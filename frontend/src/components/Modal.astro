---
interface Props {
  id: string;
}

const { id } = Astro.props;
---

<div id={id} class="modal" role="dialog" aria-modal="true" aria-labelledby={`${id}-title`}>
  <div class="modal-backdrop"></div>
  <div class="modal-content">
    <button class="modal-close" aria-label="Cerrar modal" title="Cerrar">
      Ã—
    </button>
    <div class="modal-body">
      <slot />
    </div>
  </div>
</div>

<style>
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
    overflow: auto;
    animation: fadeIn 0.3s ease-in-out;
  }

  .modal.active {
    display: block;
  }

  .modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
    animation: fadeIn 0.3s ease-in-out;
  }

  .modal-content {
    position: relative;
    background: white;
    margin: 2rem auto;
    padding: 0;
    max-width: 90%;
    width: 1000px;
    border-radius: 16px;
    box-shadow: 0 25px 80px rgba(0, 0, 0, 0.3);
    animation: slideUp 0.3s ease-out;
    max-height: calc(100vh - 4rem);
    display: flex;
    flex-direction: column;
  }

  .modal-close {
    position: absolute;
    top: 20px;
    right: 20px;
    background: red;
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 20px;
    font-weight: bold;
  }

  .modal-close:hover {
    background: darkred;
    color: white;
  }

  .modal-body {
    padding: 40px;
    overflow-y: auto;
    max-height: calc(100vh - 8rem);
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideUp {
    from {
      transform: translateY(50px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .modal-content {
      margin: 1rem auto;
      max-width: 95%;
      width: 95%;
      max-height: calc(100vh - 2rem);
    }

    .modal-body {
      padding: 20px;
      max-height: calc(100vh - 4rem);
    }

    .modal-close {
      top: 10px;
      right: 10px;
      width: 36px;
      height: 36px;
    }
  }

  /* Smooth scrollbar */
  .modal-body::-webkit-scrollbar {
    width: 8px;
  }

  .modal-body::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }

  .modal-body::-webkit-scrollbar-thumb {
    background: #66cdea;
    border-radius: 10px;
  }

  .modal-body::-webkit-scrollbar-thumb:hover {
    background: #4b8ba2;
  }
</style>

<script is:inline>
  function initModal(modalId) {
    const modal = document.getElementById(modalId);
    if (!modal) return;

    const backdrop = modal.querySelector('.modal-backdrop');
    const closeBtn = modal.querySelector('.modal-close');

    // Close on backdrop click
    if (backdrop) {
      backdrop.addEventListener('click', () => {
        closeModal(modalId);
      });
    }

    // Close on close button click
    if (closeBtn) {
      closeBtn.addEventListener('click', () => {
        closeModal(modalId);
      });
    }

    // Close on Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal.classList.contains('active')) {
        closeModal(modalId);
      }
    });
  }

  function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.add('active');
      document.body.style.overflow = 'hidden'; // Prevent background scrolling
    }
  }

  function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.remove('active');
      document.body.style.overflow = ''; // Restore scrolling
    }
  }

  // Export functions to global scope for use in other scripts
  window.openModal = openModal;
  window.closeModal = closeModal;
  window.initModal = initModal;
</script>
